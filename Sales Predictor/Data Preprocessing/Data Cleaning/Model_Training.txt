mport pandas as pd
import joblib
# Assuming you have a pandas DataFrame 'data'
# Example of data:
data = pd.read_csv('encoded_sales_data.csv')
data = pd.DataFrame(data)

# Specify the name of the target column
target_column = 'Item_Outlet_Sales'  # replace with your actual target column name

# Separate features and target
X = data.drop(columns=[target_column])  # Features (independent variables)
y = data[target_column]  # Target (dependent variable)

# Now, X contains the features, and y contains the target
# Split data into training and testing sets (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the Linear Regression model
model = LinearRegression()

# Fit the model with the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)  # Mean Squared Error
rmse = np.sqrt(mse)                       # Root Mean Squared Error
r2 = r2_score(y_test, y_pred)             # R-squared

# Print the evaluation metrics
print(f"Mean Squared Error: {mse}")
print(f"Root Mean Squared Error: {rmse}")
print(f"R-squared: {r2}")

# Assuming 'model' is your trained model
joblib.dump(model, 'model_1')

